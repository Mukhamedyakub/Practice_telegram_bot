const { axiosInstance } = require("./axios");
const { 
    saveUser, 
    getUser, 
    isUserRegistered, 
    saveOTP, 
    getOTP, 
    deleteOTP,
    setUserSession,
    getUserSession,
    deleteUserSession
} = require("./database");
const { generateOTP, sendSMS } = require("./otpService");
const { analyzeImage } = require("./geminiService");
const User = require("../../models/User");
const axios = require("axios");
const { saveIndication } = require('./database');
require("dotenv").config(); // —á—Ç–æ–±—ã .env –ø–æ–¥—Ö–≤–∞—Ç–∏–ª—Å—è
const BOT_TOKEN = process.env.MY_TOKEN; // —á—Ç–æ–±—ã BOT_TOKEN –ø–æ–ª—É—á–∏–ª –∑–Ω–∞—á–µ–Ω–∏–µ



function sendMessage(chatId, messageText, options = {}) {
    return axiosInstance.get("sendMessage", {
        chat_id: chatId,
        text: messageText,
        parse_mode: "HTML",
        ...options
    });
}

function createInlineKeyboard(buttons) {
    return {
        reply_markup: {
            inline_keyboard: buttons
        }
    };
}

async function handleStart(messageObj) {
    const chatId = messageObj.chat.id;

    const welcomeMessage = `
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á–µ—Ç–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥!</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
/login - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
/profile - –ü—Ä–æ—Ñ–∏–ª—å
/sendIndication - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è
`;

    return sendMessage(chatId, welcomeMessage);
}

async function handleHelp(messageObj) {
    const chatId = messageObj.chat.id;

    const helpMessage = `
üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/login - –í—Ö–æ–¥ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
/sendIndication - –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å (/register)  
2Ô∏è‚É£ –ò–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É (/login)  
3Ô∏è‚É£ –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å  
`;

    return sendMessage(chatId, helpMessage);
}

async function handleRegister(messageObj) {
    const chatId = messageObj.chat.id;
    const userId = messageObj.from.id;

    const existingUser = await getUser(userId);
    if (existingUser) {
        return sendMessage(chatId, 
            "‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–ª–∏ /login —á—Ç–æ–±—ã –≤–æ–π—Ç–∏.");
    }

    setUserSession(userId, { step: "name" });
    return sendMessage(chatId, "üìù –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:");
}


async function handleLogin(messageObj) {
    const chatId = messageObj.chat.id;
    const userId = messageObj.from.id;

    if (!(await isUserRegistered(userId))) {
        return sendMessage(chatId, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /register");
    }

    setUserSession(userId, { step: "login_phone" });
    return sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX):");
}

async function handleLoginStep(messageObj) {
    const chatId = messageObj.chat.id;
    const userId = messageObj.from.id;
    const text = messageObj.text;
    const session = getUserSession(userId);
    if (!session) return;

    switch (session.step) {
        case "login_phone":
            if (!/^\+7\d{10}$/.test(text)) {
                return sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX");
            }
            const user = await getUser(userId);
            if (!user || user.phone !== text) {
                return sendMessage(chatId, "‚ùå –ù–æ–º–µ—Ä –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º");
            }

            const otp = generateOTP();
            saveOTP(text, otp);
            await sendSMS(text, `–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: ${otp}`);
            session.phone = text;
            session.step = "login_otp";
            setUserSession(userId, session);
            return sendMessage(chatId, "üì± –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:");

        case "login_otp":
            const storedOTP = getOTP(session.phone);
            if (!storedOTP || storedOTP.code !== text) {
                return sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:");
            }
            if (Date.now() - storedOTP.timestamp > 5 * 60 * 1000) {
                deleteOTP(session.phone);
                deleteUserSession(userId);
                return sendMessage(chatId, "‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /login —Å–Ω–æ–≤–∞.");
            }

            deleteOTP(session.phone);
            deleteUserSession(userId);
            setUserSession(userId, { loggedIn: true });
            return sendMessage(chatId, "‚úÖ –í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!");
    }
}

async function handleProfile(messageObj) {
    const chatId = messageObj.chat.id;
    const userId = messageObj.from.id;
    const session = getUserSession(userId);

    if (!session || !session.loggedIn) {
        return sendMessage(chatId, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ (/login)");
    }

    const user = await getUser(userId);
    const msg = `
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>
<b>–ò–º—è:</b> ${user.name}
<b>–§–∞–º–∏–ª–∏—è:</b> ${user.surname}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${user.phone}
<b>–ò–ò–ù:</b> ${user.iin}
<b>–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç:</b> ${user.personalAccount}
<b>–ê–¥—Ä–µ—Å:</b> ${user.address}
<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ${new Date(user.registrationDate).toLocaleDateString()}
`;
    return sendMessage(chatId, msg);
}

async function handleSendIndication(messageObj) {
    const chatId = messageObj.chat.id;
    const userId = messageObj.from.id;

    if (!(await isUserRegistered(userId))) {
        return sendMessage(chatId, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register");
    }

    setUserSession(userId, { step: "waiting_photo" });
    return sendMessage(chatId, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞:");
}

async function handleRegistrationStep(messageObj) {
    const chatId = messageObj.chat.id;
    const userId = messageObj.from.id;
    const text = messageObj.text;
    const session = getUserSession(userId);

    if (!session) return;

    switch (session.step) {
        case "name":
            session.userData = { name: text };
            session.step = "surname";
            setUserSession(userId, session);
            return sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:");

        case "surname":
            session.userData.surname = text;
            session.step = "phone";
            setUserSession(userId, session);
            return sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX):");

        case "phone":
            if (!/^\+7\d{10}$/.test(text)) {
                return sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX");
            }

            const existingUserByPhone = await User.findOne({ phone: text });
            if (existingUserByPhone) {
                deleteUserSession(userId);
                return sendMessage(chatId, "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login —á—Ç–æ–±—ã –≤–æ–π—Ç–∏.");
            }

            session.userData.phone = text;
            session.step = "iin";
            setUserSession(userId, session);
            return sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ò–ù (12 —Ü–∏—Ñ—Ä):");


        case "iin":
            if (!/^\d{12}$/.test(text)) {
                return sendMessage(chatId, "‚ùå –ò–ò–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 —Ü–∏—Ñ—Ä");
            }
            session.userData.iin = text;
            session.step = "personal_account";
            setUserSession(userId, session);
            return sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞:");

        case "personal_account":
            session.userData.personalAccount = text;
            session.step = "address";
            setUserSession(userId, session);
            return sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:");

        case "address":
            session.userData.address = text;

            const otp = generateOTP();
            saveOTP(session.userData.phone, otp);

            try {
                await sendSMS(session.userData.phone, `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${otp}`);
                session.step = "otp_verification";
                setUserSession(userId, session);
                return sendMessage(chatId, `üì± SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ω–æ–º–µ—Ä ${session.userData.phone}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:`);
            } catch (error) {
                deleteUserSession(userId);
                return sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }

        case "otp_verification":
            const storedOTP = getOTP(session.userData.phone);
            if (!storedOTP || storedOTP.code !== text) {
                return sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
            }

            if (Date.now() - storedOTP.timestamp > 5 * 60 * 1000) {
                deleteOTP(session.userData.phone);
                deleteUserSession(userId);
                return sendMessage(chatId, "‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /register");
            }

            const userData = {
                ...session.userData,
                userId: userId,
                registrationDate: Date.now()
            };
            
            console.log("‚û°Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userData);
            await saveUser(userId, userData);
            deleteOTP(session.userData.phone);
            deleteUserSession(userId);

            return sendMessage(chatId, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.");
    }
    if (session.step === "login_phone") {
    if (!/^\+7\d{10}$/.test(text)) {
        return sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX");
    }
    const user = await getUser(userId);
    if (!user || user.phone !== text) {
        return sendMessage(chatId, "‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }

    session.phone = text;
    const otp = generateOTP();
    saveOTP(text, otp);

    await sendSMS(text, `–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: ${otp}`);
    session.step = "login_otp";
    setUserSession(userId, session);
    return sendMessage(chatId, "üì± SMS —Å –∫–æ–¥–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:");
}

if (session.step === "login_otp") {
    const storedOTP = getOTP(session.phone);
    if (!storedOTP || storedOTP.code !== text) {
        return sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:");
    }

    if (Date.now() - storedOTP.timestamp > 5 * 60 * 1000) {
        deleteOTP(session.phone);
        deleteUserSession(userId);
        return sendMessage(chatId, "‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤—Ö–æ–¥ –∑–∞–Ω–æ–≤–æ —Å /login.");
    }

    deleteOTP(session.phone);
    deleteUserSession(userId);

    setUserSession(userId, { loggedIn: true });
    return sendMessage(chatId, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!");
}
}

async function handleLogin(messageObj) {
    const chatId = messageObj.chat.id;
    const userId = messageObj.from.id;

    if (!(await isUserRegistered(userId))) {
        return sendMessage(chatId, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register —Å–Ω–∞—á–∞–ª–∞.");
    }

    setUserSession(userId, { step: "login_phone" });
    return sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞ (—Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX):");
}

async function handleLogout(messageObj) {
    const chatId = messageObj.chat.id;
    const userId = messageObj.from.id;

    const user = await getUser(userId);
    if (!user) {
        return sendMessage(chatId, "‚ùå –í—ã –Ω–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.");
    }

    await saveUser(userId, null);  // —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã
    deleteUserSession(userId);     // –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
    return sendMessage(chatId, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.");
}


async function downloadFileAsBase64(fileUrl) {
  const response = await axios.get(fileUrl, { responseType: 'arraybuffer' });
  const buffer = Buffer.from(response.data);
  return buffer.toString('base64');
}

async function handlePhotoIndication(messageObj) {
  const chatId = messageObj.chat.id;
  const userId = messageObj.from.id;
  const session = getUserSession(userId);

  if (!session || session.step !== "waiting_photo") return;

  try {
    const fileId = messageObj.photo[messageObj.photo.length - 1].file_id;
    const fileInfo = await axios.get(`https://api.telegram.org/bot${BOT_TOKEN}/getFile?file_id=${fileId}`);
    const filePath = fileInfo.data.result.file_path;
    const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${filePath}`;
    
    const base64Data = await downloadFileAsBase64(fileUrl);

    sendMessage(chatId, "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞...");
    const numbers = await analyzeImage(base64Data);
    
    if (!numbers) {
        deleteUserSession(userId);
        return sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /sendIndication");
    }

    session.step = "confirm_numbers";
    session.numbers = numbers.slice(0, 5);
    session.photoPath = fileUrl;
    setUserSession(userId, session);

    const confirmButtons = createInlineKeyboard([
      [
        { text: "‚úÖ –î–∞, –≤–µ—Ä–Ω–æ", callback_data: "confirm_numbers" },
        { text: "‚ùå –ù–µ—Ç, –Ω–µ–≤–µ—Ä–Ω–æ", callback_data: "reject_numbers" }
      ]
    ]);

    return sendMessage(chatId, `üîç <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è:</b>\n\n${session.numbers}\n\n<b>–ü–æ–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ä–Ω—ã?</b>`, confirmButtons);

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", err);
    deleteUserSession(userId);
    return sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /sendIndication");
  }
}





async function handleCallbackQuery(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    axiosInstance.get("answerCallbackQuery", { callback_query_id: callbackQuery.id });

    switch (data) {
        case "logout":
            if (await isUserRegistered(userId)) {
                await saveUser(userId, null);
                return sendMessage(chatId, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.");
            }
            break;

        case "confirm_numbers":
            const session = getUserSession(userId);
            if (session && session.step === "confirm_numbers") {
                await saveIndication({
                    userId: userId,
                    numbers: session.numbers,
                    photoPath: session.photoPath,
                    timestamp: new Date()
                });

                deleteUserSession(userId);
                return sendMessage(chatId, "‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.");
            }
            break;


        case "reject_numbers":
            deleteUserSession(userId);
            return sendMessage(chatId, "‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /sendIndication –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.");
    }
}

async function handleMessage(messageObj) {
    if (messageObj.callback_query) {
        return handleCallbackQuery(messageObj.callback_query);
    }

    if (messageObj.message) {
        messageObj = messageObj.message;
    }

    if (!messageObj || typeof messageObj !== "object" || !messageObj.chat) {
        console.warn("‚ö†Ô∏è Invalid message object received:", messageObj);
        return;
    }

    const userId = messageObj.from.id;
    const messageText = messageObj.text;

    if (messageObj.photo) {
        return handlePhotoIndication(messageObj);
    }

    if (!messageText) return;

    if (messageText.startsWith("/")) {
    const command = messageText.substring(1);
    switch (command) {
        case "start":
            return handleStart(messageObj);
        case "help":
            return handleHelp(messageObj);
        case "register":
            return handleRegister(messageObj);
        case "profile":
            return handleProfile(messageObj);
        case "sendIndication":
            return handleSendIndication(messageObj);
        case "login":
            return handleLogin(messageObj);
        case "logout":
            return handleLogout(messageObj);
        default:
            return sendMessage(messageObj.chat.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
    }
}


    const session = getUserSession(userId);
    if (session && session.step && session.step !== "waiting_photo") {
        return handleRegistrationStep(messageObj);
    }

    return sendMessage(messageObj.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
}

module.exports = { handleMessage };
