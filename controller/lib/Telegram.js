const { axiosInstance } = require("./axios");
const { 
    saveUser, 
    getUser, 
    isUserRegistered, 
    saveOTP, 
    getOTP, 
    deleteOTP,
    setUserSession,
    getUserSession,
    deleteUserSession
} = require("./database");
const { generateOTP, sendSMS } = require("./otpService");
const { analyzeImage } = require("./geminiService");

function sendMessage(chatId, messageText, options = {}) {
    return axiosInstance.get("sendMessage", {
        chat_id: chatId,
        text: messageText,
        parse_mode: "HTML",
        ...options
    });
}

function sendPhoto(chatId, photo, caption = "") {
    return axiosInstance.post("sendPhoto", {
        chat_id: chatId,
        photo: photo,
        caption: caption
    });
}

function createInlineKeyboard(buttons) {
    return {
        reply_markup: {
            inline_keyboard: buttons
        }
    };
}

function createKeyboard(buttons) {
    return {
        reply_markup: {
            keyboard: buttons,
            resize_keyboard: true,
            one_time_keyboard: true
        }
    };
}

async function handleStart(messageObj) {
    const chatId = messageObj.chat.id;
    const userId = messageObj.from.id;
    
    const welcomeMessage = `
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á–µ—Ç–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–æ–º–æ—â—å

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
/profile - –ü—Ä–æ—Ñ–∏–ª—å
/sendIndication - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è
`;

    return sendMessage(chatId, welcomeMessage);
}

async function handleHelp(messageObj) {
    const chatId = messageObj.chat.id;
    
    const helpMessage = `
üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
/sendIndication - –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤ (—Å —Ñ–æ—Ç–æ)

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register
2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–¥–æ–º –∏–∑ SMS
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sendIndication –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π
4. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile
`;

    return sendMessage(chatId, helpMessage);
}

async function handleRegister(messageObj) {
    const chatId = messageObj.chat.id;
    const userId = messageObj.from.id;
    
    if (isUserRegistered(userId)) {
        const logoutButton = createInlineKeyboard([[
            { text: "üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data: "logout" }
        ]]);
        
        return sendMessage(chatId, 
            "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n–•–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?", 
            logoutButton
        );
    }
    
    setUserSession(userId, { step: "name" });
    return sendMessage(chatId, "üìù –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:");
}

async function handleProfile(messageObj) {
    const chatId = messageObj.chat.id;
    const userId = messageObj.from.id;
    
    if (!isUserRegistered(userId)) {
        return sendMessage(chatId, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register");
    }
    
    const user = getUser(userId);
    const profileMessage = `
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>

<b>–ò–º—è:</b> ${user.name}
<b>–§–∞–º–∏–ª–∏—è:</b> ${user.surname}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${user.phone}
<b>–ò–ò–ù:</b> ${user.iin}
<b>–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç:</b> ${user.personalAccount}
<b>–ê–¥—Ä–µ—Å:</b> ${user.address}
<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ${new Date(user.registrationDate).toLocaleDateString()}
`;

    return sendMessage(chatId, profileMessage);
}

async function handleSendIndication(messageObj) {
    const chatId = messageObj.chat.id;
    const userId = messageObj.from.id;
    
    if (!isUserRegistered(userId)) {
        return sendMessage(chatId, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register");
    }
    
    setUserSession(userId, { step: "waiting_photo" });
    return sendMessage(chatId, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞:");
}

async function handleRegistrationStep(messageObj) {
    const chatId = messageObj.chat.id;
    const userId = messageObj.from.id;
    const text = messageObj.text;
    const session = getUserSession(userId);
    
    if (!session) return;
    
    switch (session.step) {
        case "name":
            session.userData = { name: text };
            session.step = "surname";
            setUserSession(userId, session);
            return sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:");
            
        case "surname":
            session.userData.surname = text;
            session.step = "phone";
            setUserSession(userId, session);
            return sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX):");
            
        case "phone":
            if (!/^\+7\d{10}$/.test(text)) {
                return sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX");
            }
            session.userData.phone = text;
            session.step = "iin";
            setUserSession(userId, session);
            return sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ò–ù (12 —Ü–∏—Ñ—Ä):");
            
        case "iin":
            if (!/^\d{12}$/.test(text)) {
                return sendMessage(chatId, "‚ùå –ò–ò–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 12 —Ü–∏—Ñ—Ä");
            }
            session.userData.iin = text;
            session.step = "personal_account";
            setUserSession(userId, session);
            return sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞:");
            
        case "personal_account":
            session.userData.personalAccount = text;
            session.step = "address";
            setUserSession(userId, session);
            return sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:");
            
        case "address":
            session.userData.address = text;
            session.step = "otp_sending";
            setUserSession(userId, session);
            
            // Generate and send OTP
            const otp = generateOTP();
            saveOTP(session.userData.phone, otp);
            
            try {
                await sendSMS(session.userData.phone, `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${otp}`);
                session.step = "otp_verification";
                setUserSession(userId, session);
                return sendMessage(chatId, `üì± SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ω–æ–º–µ—Ä ${session.userData.phone}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:`);
            } catch (error) {
                deleteUserSession(userId);
                return sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
            
        case "otp_verification":
            const storedOTP = getOTP(session.userData.phone);
            if (!storedOTP || storedOTP.code !== text) {
                return sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
            }
            
            // Check OTP expiration (5 minutes)
            if (Date.now() - storedOTP.timestamp > 5 * 60 * 1000) {
                deleteOTP(session.userData.phone);
                deleteUserSession(userId);
                return sendMessage(chatId, "‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /register");
            }
            
            // Save user
            const userData = {
                ...session.userData,
                userId: userId,
                registrationDate: Date.now()
            };
            saveUser(userId, userData);
            deleteOTP(session.userData.phone);
            deleteUserSession(userId);
            
            return sendMessage(chatId, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.");
    }
}

async function handlePhotoIndication(messageObj) {
    const chatId = messageObj.chat.id;
    const userId = messageObj.from.id;
    const session = getUserSession(userId);
    
    if (!session || session.step !== "waiting_photo") {
        return;
    }
    
    try {
        // Get photo file
        const photo = messageObj.photo[messageObj.photo.length - 1]; // Get highest resolution
        const fileResponse = await axiosInstance.get("getFile", { file_id: photo.file_id });
        const filePath = fileResponse.data.result.file_path;
        
        // Download photo
        const photoResponse = await axiosInstance.get(filePath, {}, { responseType: 'arraybuffer' });
        const photoBase64 = Buffer.from(photoResponse.data).toString('base64');
        
        // Analyze with Gemini
        sendMessage(chatId, "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞...");
        
        const numbers = await analyzeImage(photoBase64);
        
        // Store analyzed data in session
        session.step = "confirm_numbers";
        session.numbers = numbers;
        setUserSession(userId, session);
        
        const confirmButtons = createInlineKeyboard([
            [
                { text: "‚úÖ –î–∞, –≤–µ—Ä–Ω–æ", callback_data: "confirm_numbers" },
                { text: "‚ùå –ù–µ—Ç, –Ω–µ–≤–µ—Ä–Ω–æ", callback_data: "reject_numbers" }
            ]
        ]);
        
        return sendMessage(chatId, 
            `üîç <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è:</b>\n\n${numbers}\n\n<b>–ü–æ–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ä–Ω—ã?</b>`, 
            confirmButtons
        );
        
    } catch (error) {
        console.error("Error processing photo:", error);
        deleteUserSession(userId);
        return sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –∫–æ–º–∞–Ω–¥–æ–π /sendIndication");
    }
}

async function handleCallbackQuery(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;
    
    // Answer callback query
    axiosInstance.get("answerCallbackQuery", { callback_query_id: callbackQuery.id });
    
    switch (data) {
        case "logout":
            if (isUserRegistered(userId)) {
                saveUser(userId, null);
                users.delete(userId);
                return sendMessage(chatId, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.");
            }
            break;
            
        case "confirm_numbers":
            const session = getUserSession(userId);
            if (session && session.step === "confirm_numbers") {
                // Log the indication
                const user = getUser(userId);
                console.log(`üìä INDICATION SENT - User: ${user.name} ${user.surname}, Phone: ${user.phone}, Numbers: ${session.numbers}, Time: ${new Date().toISOString()}`);
                
                deleteUserSession(userId);
                return sendMessage(chatId, "‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.");
            }
            break;
            
        case "reject_numbers":
            deleteUserSession(userId);
            return sendMessage(chatId, "‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /sendIndication –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.");
    }
}

async function handleMessage(messageObj) {
    // Handle callback queries
    if (messageObj.callback_query) {
        return handleCallbackQuery(messageObj.callback_query);
    }
    
    // Handle regular messages
    if (messageObj.message) {
        messageObj = messageObj.message;
    }
    
    if (!messageObj || typeof messageObj !== "object" || !messageObj.chat) {
        console.warn("‚ö†Ô∏è Invalid message object received:", messageObj);
        return;
    }

    const chatId = messageObj.chat.id;
    const userId = messageObj.from.id;
    const messageText = messageObj.text;
    
    // Handle photo messages
    if (messageObj.photo) {
        return handlePhotoIndication(messageObj);
    }
    
    // Handle text messages
    if (!messageText) return;
    
    // Handle commands
    if (messageText.startsWith("/")) {
        const command = messageText.substring(1);
        switch (command) {
            case "start":
                return handleStart(messageObj);
            case "help":
                return handleHelp(messageObj);
            case "register":
                return handleRegister(messageObj);
            case "profile":
                return handleProfile(messageObj);
            case "sendIndication":
                return handleSendIndication(messageObj);
            default:
                return sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
        }
    }
    
    // Handle registration steps
    const session = getUserSession(userId);
    if (session && session.step && session.step !== "waiting_photo") {
        return handleRegistrationStep(messageObj);
    }
    
    // Default echo response
    return sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
}

module.exports = { handleMessage };